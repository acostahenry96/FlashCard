{"version":3,"sources":["Layout/Common/Header.js","Layout/Common/NotFound.js","utils/api/index.js","Layout/Home/DeckList.js","Layout/Home/Home.js","Layout/Home/CreateDeck.js","Layout/Deck/StudyCard.js","Layout/Deck/Study.js","Layout/Deck/DeckCard.js","Layout/Deck/Deck.js","Layout/Deck/EditDeck.js","Layout/Cards/AddCard.js","Layout/Cards/EditCard.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","a","fetch","response","status","Error","statusText","json","name","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","deleteDeck","createCard","card","Number","readCard","cardId","updateCard","updatedCard","deleteCard","append","DeckList","description","updateDecks","history","useHistory","handleDelete","window","confirm","push","style","width","length","to","onClick","Home","numOfDecks","useState","decks","setDecks","useEffect","abortController","AbortController","loadDecks","abort","map","CreateDeck","formData","setFormData","handleChange","event","target","value","handleSubmit","preventDefault","deckNum","console","log","aria-label","aria-current","onSubmit","htmlFor","type","placeholder","onChange","required","resize","rows","StudyCard","initialState","flipped","currentCard","session","setSession","useParams","back","front","Study","setDeck","newDeck","loadDeck","Object","keys","DeckCard","updateCards","useRouteMatch","Deck","numOfCards","setNumOfCards","val","loadedDeck","EditDeck","AddCard","setCard","loadedCard","Layout","setNumOfDecks","path","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a42bd239.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options) {\n  try {\n    const response = await fetch(url, options);\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      throw error;\n    }\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from 'react'\r\nimport { PropTypes } from 'prop-types'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { deleteDeck } from '../../utils/api/index'\r\n\r\nfunction DeckList({ id, name, description, cards, updateDecks }) {\r\n  const history = useHistory()\r\n\r\n  const handleDelete = async () => {\r\n    const toDelete = window.confirm(\r\n      'Delete this deck? \\n \\n \\n You will not be able to recover it.'\r\n    )\r\n    if (toDelete) {\r\n      await deleteDeck(id)\r\n      updateDecks(-1) // to re-render decklist on home page\r\n      history.push('/')\r\n    }\r\n  }\r\n  return (\r\n    <div className='card' style={{ width: '40rem' }}>\r\n      <div className='card-body'>\r\n        <div className='d-flex justify-content-between'>\r\n          <h5 className='card-title'>{name}</h5>\r\n          <p>{cards.length} cards</p>\r\n        </div>\r\n        <p className='card-text'>{description}</p>\r\n        <div className='d-flex justify-content-between'>\r\n          <div>\r\n            <Link to={`/decks/${id}`}>\r\n              <button className='btn btn-secondary m-1'>\r\n                <i className='bi bi-eye-fill'></i> View\r\n              </button>\r\n            </Link>\r\n            <Link to={`/decks/${id}/study`}>\r\n              <button className='btn btn-primary'>\r\n                <i className='bi bi-journal-bookmark'></i> Study\r\n              </button>\r\n            </Link>\r\n          </div>\r\n          <button className='btn btn-danger' onClick={handleDelete}>\r\n            {' '}\r\n            <i className='bi bi-trash'> </i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nDeckList.propTypes = {\r\n  id: PropTypes.number,\r\n  name: PropTypes.string,\r\n  description: PropTypes.string,\r\n  cards: PropTypes.array,\r\n  updateDecks: PropTypes.func,\r\n}\r\n\r\nexport default DeckList\r\n","import React, { useState, useEffect } from 'react'\r\nimport DeckList from './DeckList'\r\nimport { Link } from 'react-router-dom'\r\nimport { listDecks } from '../../utils/api/index'\r\nimport { PropTypes } from 'prop-types'\r\n\r\nfunction Home({ numOfDecks, updateDecks }) {\r\n  const [decks, setDecks] = useState([])\r\n\r\n  // initalize all decks to show\r\n  useEffect(() => {\r\n    const abortController = new AbortController()\r\n    const loadDecks = async () => {\r\n      const deck = await listDecks(abortController.signal)\r\n      setDecks(() => deck)\r\n    }\r\n    loadDecks()\r\n    return () => abortController.abort()\r\n  }, [numOfDecks])\r\n\r\n  return (\r\n    <div className='NotFound'>\r\n      <Link to='/decks/new'>\r\n        <button className='btn btn-secondary btn-lg mb-3'>\r\n          <i className='bi bi-plus'></i> Create Deck\r\n        </button>\r\n      </Link>\r\n      {/* loop through decks and displays them */}\r\n      {decks.map(({ id, name, description, cards }) => (\r\n        <DeckList\r\n          key={id}\r\n          id={id}\r\n          description={description}\r\n          cards={cards}\r\n          name={name}\r\n          updateDecks={updateDecks}\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nHome.propTypes = {\r\n  numOfDecks: PropTypes.number,\r\n  updateDecks: PropTypes.func,\r\n}\r\n\r\nexport default Home\r\n","import React, { useState } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { createDeck } from '../../utils/api/index'\r\n\r\nexport default function CreateDeck() {\r\n  const initialState = { name: '', description: '' }\r\n  const [formData, setFormData] = useState(initialState)\r\n  const history = useHistory()\r\n\r\n  const handleChange = event => {\r\n    setFormData({ ...formData, [event.target.name]: event.target.value })\r\n  }\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault()\r\n    const deckNum = await createDeck(formData)\r\n    console.log(deckNum)\r\n    history.push(`/decks/${deckNum.id}`)\r\n  }\r\n  return (\r\n    <>\r\n      <nav aria-label='breadcrumb'>\r\n        <ol className='breadcrumb'>\r\n          <li className='breadcrumb-item text-primary'>\r\n            <Link to='/'>\r\n              <i className='bi bi-house-door-fill'></i> Home\r\n            </Link>\r\n          </li>\r\n          <li className='breadcrumb-item active' aria-current='page'>\r\n            Create Deck\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <h1>Create Deck</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className='form-group'>\r\n          <label htmlFor='name'>Name</label>\r\n          <input\r\n            name='name'\r\n            type='text'\r\n            className='form-control'\r\n            value={formData.name}\r\n            placeholder='Deck Name'\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n        </div>\r\n        <div className='form-group'>\r\n          <label htmlFor='description'>Description</label>\r\n          <textarea\r\n            name='description'\r\n            style={{ resize: 'none' }}\r\n            rows='5'\r\n            className='form-control'\r\n            value={formData.description}\r\n            placeholder='Brief description of the deck'\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n        </div>\r\n        <div className='mb-3'>\r\n          <Link to='/'>\r\n            <button className='btn btn-secondary mr-2'>Cancel</button>\r\n          </Link>\r\n          <button type='submit' className='btn btn-primary'>\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useHistory, Link, useParams } from 'react-router-dom'\r\nimport { PropTypes } from 'prop-types'\r\n\r\nexport default function StudyCard({ cards }) {\r\n  const initialState = { flipped: false, currentCard: 0 }\r\n  const [session, setSession] = useState(initialState)\r\n  const history = useHistory()\r\n  const { deckId } = useParams()\r\n\r\n  // loop through the cards prop and prompt after last card\r\n  const handleNext = () => {\r\n    if (session.currentCard < cards.length - 1) {\r\n      setSession({\r\n        ...session,\r\n        currentCard: session.currentCard + 1,\r\n        flipped: false,\r\n      })\r\n    } else {\r\n      window.confirm(\r\n        'Restart cards? \\n \\n \\n Click \"cancel\" to return to the home page.'\r\n      )\r\n        ? setSession(initialState)\r\n        : history.push('/')\r\n    }\r\n  }\r\n\r\n  if (cards.length > 2) {\r\n    return (\r\n      <>\r\n        <div className='card' style={{ width: '32rem' }}>\r\n          <div className='card-body'>\r\n            <h5 className='card-title'>\r\n              Card {session.currentCard + 1} of {cards.length}\r\n            </h5>\r\n            <p className='card-text'>\r\n              {session.flipped\r\n                ? cards[session.currentCard].back\r\n                : cards[session.currentCard].front}\r\n            </p>\r\n            <button\r\n              className='btn btn-secondary mr-2'\r\n              onClick={() => setSession({ ...session, flipped: true })}>\r\n              Flip\r\n            </button>\r\n            {session.flipped && (\r\n              <button className='btn btn-primary' onClick={handleNext}>\r\n                Next\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  } else {\r\n    return (\r\n      <>\r\n        <h2>Not enough cards</h2>\r\n        <p>\r\n          You need at least 3 cards to study There are {cards.length} cards in\r\n          this deck\r\n        </p>\r\n        <Link to={`/decks/${deckId}/cards/new`}>\r\n          <button className='btn btn-primary'>\r\n            <i className='bi bi-plus'> Add Cards</i>\r\n          </button>\r\n        </Link>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nStudyCard.propTypes = {\r\n  cards: PropTypes.array,\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { Link } from 'react-router-dom'\r\nimport { readDeck } from '../../utils/api/index'\r\nimport StudyCard from './StudyCard'\r\n\r\nexport default function Study() {\r\n  const [deck, setDeck] = useState({})\r\n  const { deckId } = useParams()\r\n\r\n  // initalize the deck using params\r\n  useEffect(() => {\r\n    const loadDeck = async () => {\r\n      const newDeck = await readDeck(deckId)\r\n      setDeck(() => newDeck)\r\n    }\r\n    loadDeck()\r\n  }, [deckId])\r\n\r\n  if (Object.keys(deck).length) {\r\n    return (\r\n      <>\r\n        <nav aria-label='breadcrumb'>\r\n          <ol className='breadcrumb'>\r\n            <li className='breadcrumb-item text-primary'>\r\n              <Link to='/'>\r\n                <i className='bi bi-house-door-fill'></i> Home\r\n              </Link>\r\n            </li>\r\n            <li className='breadcrumb-item text-primary'>\r\n              <Link to={`/decks/${deckId}`}>{deck.name}</Link>\r\n            </li>\r\n            <li className='breadcrumb-item active' aria-current='page'>\r\n              Study\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n        <h1>Study: {deck.name}</h1>\r\n        <StudyCard cards={deck.cards} />\r\n      </>\r\n    )\r\n  } else {\r\n    return <p>Loading...</p>\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { deleteCard } from '../../utils/api/index'\r\nimport { Link, useRouteMatch } from 'react-router-dom'\r\nimport { PropTypes } from 'prop-types'\r\n\r\nexport default function DeckCard({ id, front, back, updateCards }) {\r\n  const { url } = useRouteMatch()\r\n  const handleDelete = async () => {\r\n    const toDelete = window.confirm(\r\n      'Delete this card? \\n \\n \\n You will not be able to recover it.'\r\n    )\r\n    if (toDelete) {\r\n      await deleteCard(id)\r\n      updateCards(-1) //to re-render the carlist on the deck page\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <div className='card' style={{ width: '40rem' }}>\r\n        <div className='card-body'>\r\n          <div className='d-flex justify-content-between'>\r\n            <p className='card-text w-50'>{front}</p>\r\n            <p className='card-text w-50'>{back}</p>\r\n          </div>\r\n          <div className='d-flex justify-content-end'>\r\n            <Link to={`${url}/cards/${id}/edit`}>\r\n              <button className='btn btn-secondary mr-2'>\r\n                <i className='bi bi-pencil-fill'></i> Edit\r\n              </button>\r\n            </Link>\r\n            <button className='btn btn-danger' onClick={handleDelete}>\r\n              <i className='bi bi-trash'></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nDeckCard.propTypes = {\r\n  id: PropTypes.number,\r\n  front: PropTypes.string,\r\n  back: PropTypes.string,\r\n  updateCards: PropTypes.func,\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useParams, Link, useHistory } from 'react-router-dom'\r\nimport { readDeck, deleteDeck } from '../../utils/api/index'\r\nimport DeckCard from './DeckCard'\r\nimport { PropTypes } from 'prop-types'\r\n\r\nexport default function Deck({ updateDecks }) {\r\n  const [deck, setDeck] = useState({})\r\n  const [numOfCards, setNumOfCards] = useState(0)\r\n  const { deckId } = useParams()\r\n  const history = useHistory()\r\n\r\n  const handleDelete = async () => {\r\n    const toDelete = window.confirm(\r\n      'Delete this deck? \\n \\n \\n You will not be able to recover it.'\r\n    )\r\n    if (toDelete) {\r\n      await deleteDeck(deck.id)\r\n      updateDecks(-1) // to re-render the decklist on the home page\r\n      history.push('/')\r\n    }\r\n  }\r\n\r\n  const updateCards = val => {\r\n    setNumOfCards(() => numOfCards + val)\r\n  }\r\n  // initalize the deck using params\r\n  useEffect(() => {\r\n    const abortController = new AbortController()\r\n    const loadDeck = async () => {\r\n      const loadedDeck = await readDeck(deckId, abortController.signal)\r\n      setDeck(() => loadedDeck)\r\n    }\r\n    loadDeck()\r\n    return () => abortController.abort()\r\n  }, [numOfCards, deckId])\r\n\r\n  if (deck.id) {\r\n    return (\r\n      <>\r\n        <nav aria-label='breadcrumb'>\r\n          <ol className='breadcrumb'>\r\n            <li className='breadcrumb-item text-primary'>\r\n              <Link to='/'>\r\n                <i className='bi bi-house-door-fill'></i> Home\r\n              </Link>\r\n            </li>\r\n            <li className='breadcrumb-item active' aria-current='page'>\r\n              {deck.name}\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n        <h3>{deck.name}</h3>\r\n        <p>{deck.description}</p>\r\n        <div className='d-flex justify-content-between'>\r\n          <div>\r\n            <Link to={`/decks/${deck.id}/edit`}>\r\n              <button className='btn btn-secondary'>\r\n                <i className='bi bi-pencil-fill'></i> Edit\r\n              </button>\r\n            </Link>\r\n            <Link to={`/decks/${deck.id}/study`}>\r\n              <button className='btn btn-primary mx-2'>\r\n                <i className='bi bi-journal-bookmark'></i> Study\r\n              </button>\r\n            </Link>\r\n            <Link to={`/decks/${deck.id}/cards/new`}>\r\n              <button className='btn btn-secondary'>\r\n                <i className='bi bi-plus'></i> Add Cards\r\n              </button>\r\n            </Link>\r\n          </div>\r\n          <button className='btn btn-danger'>\r\n            <i className='bi bi-trash' onClick={handleDelete}></i>\r\n          </button>\r\n        </div>\r\n        <h2 className='mt-3 mb-2'>Cards</h2>\r\n        <div className='mb-3'>\r\n          {/* Loop through the decks cards to display them */}\r\n          {deck.cards.map(card => (\r\n            <DeckCard\r\n              key={card.id}\r\n              id={card.id}\r\n              front={card.front}\r\n              back={card.back}\r\n              updateCards={updateCards}\r\n            />\r\n          ))}\r\n        </div>\r\n      </>\r\n    )\r\n  } else {\r\n    return <p>Loading...</p>\r\n  }\r\n}\r\n\r\nDeck.propTypes = {\r\n  updateDecks: PropTypes.func,\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Link, useHistory, useParams } from 'react-router-dom'\r\nimport { updateDeck, readDeck } from '../../utils/api/index'\r\n\r\nexport default function EditDeck() {\r\n  const initialState = { name: '', description: '' }\r\n  const [formData, setFormData] = useState(initialState)\r\n  const [deck, setDeck] = useState({})\r\n  const history = useHistory()\r\n  const { deckId } = useParams()\r\n\r\n  // initalize the deck using params and set the form fields\r\n  useEffect(() => {\r\n    const abortController = new AbortController()\r\n    const loadDeck = async () => {\r\n      const loadedDeck = await readDeck(deckId, abortController.signal)\r\n      setDeck(() => loadedDeck)\r\n      setFormData({\r\n        id: deckId,\r\n        name: loadedDeck.name,\r\n        description: loadedDeck.description,\r\n      })\r\n    }\r\n    loadDeck()\r\n    return () => abortController.abort()\r\n  }, [deckId])\r\n\r\n  const handleChange = event => {\r\n    setFormData({ ...formData, [event.target.name]: event.target.value })\r\n  }\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault()\r\n    const deckNum = await updateDeck(formData)\r\n    history.push(`/decks/${deckNum.id}`)\r\n  }\r\n  return (\r\n    <>\r\n      <nav aria-label='breadcrumb'>\r\n        <ol className='breadcrumb'>\r\n          <li className='breadcrumb-item text-primary'>\r\n            <Link to='/'>\r\n              <i className='bi bi-house-door-fill'></i> Home\r\n            </Link>\r\n          </li>\r\n          <li className='breadcrumb-item text-primary'>\r\n            <Link to={`/decks/${deckId}`}>{deck.name}</Link>\r\n          </li>\r\n          <li className='breadcrumb-item active' aria-current='page'>\r\n            Edit Deck\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <h1>Edit Deck</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className='form-group'>\r\n          <label htmlFor='formGroupExampleInput'>Name</label>\r\n          <input\r\n            name='name'\r\n            type='text'\r\n            className='form-control'\r\n            value={formData.name}\r\n            placeholder='Deck Name'\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n        </div>\r\n        <div className='form-group'>\r\n          <label htmlFor='formGroupExampleInput2'>Description</label>\r\n          <textarea\r\n            name='description'\r\n            style={{ resize: 'none' }}\r\n            rows='5'\r\n            className='form-control'\r\n            value={formData.description}\r\n            placeholder='Brief description of the deck'\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n        </div>\r\n        <div className='mb-3'>\r\n          <Link to={`/decks/${deckId}`}>\r\n            <button className='btn btn-secondary mr-2'>Cancel</button>\r\n          </Link>\r\n          <button type='submit' className='btn btn-primary'>\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Link, useParams } from 'react-router-dom'\r\nimport { createCard, readDeck } from '../../utils/api/index'\r\n\r\nexport default function AddCard() {\r\n  const initialState = { front: '', back: '' }\r\n  const [formData, setFormData] = useState(initialState)\r\n  const [deck, setDeck] = useState({})\r\n  const { deckId } = useParams()\r\n\r\n  const handleChange = event => {\r\n    setFormData({ ...formData, [event.target.name]: event.target.value })\r\n  }\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault()\r\n    await createCard(deckId, formData)\r\n    setFormData(initialState)\r\n  }\r\n  // initalize the deck using params\r\n  useEffect(() => {\r\n    const abortController = new AbortController()\r\n    const loadDeck = async () => {\r\n      const loadedDeck = await readDeck(deckId, abortController.signal)\r\n      setDeck(() => loadedDeck)\r\n    }\r\n    loadDeck()\r\n    return () => abortController.abort()\r\n  }, [deckId])\r\n\r\n  return (\r\n    <>\r\n      <nav aria-label='breadcrumb'>\r\n        <ol className='breadcrumb'>\r\n          <li className='breadcrumb-item text-primary'>\r\n            <Link to='/'>\r\n              <i className='bi bi-house-door-fill'></i> Home\r\n            </Link>\r\n          </li>\r\n          <li className='breadcrumb-item text-primary'>\r\n            <Link to={`/decks/${deckId}`}>{deck.name}</Link>\r\n          </li>\r\n          <li className='breadcrumb-item active' aria-current='page'>\r\n            Add Card\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <h1>{deck.name}: AddCard</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className='form-group'>\r\n          <label htmlFor='front'>\r\n            <h4>Front</h4>\r\n          </label>\r\n          <textarea\r\n            name='front'\r\n            style={{ resize: 'none' }}\r\n            rows='3'\r\n            className='form-control'\r\n            value={formData.front}\r\n            placeholder='Front side of card'\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n        </div>\r\n        <div className='form-group'>\r\n          <label htmlFor='back'>\r\n            <h4>Back</h4>\r\n          </label>\r\n          <textarea\r\n            name='back'\r\n            style={{ resize: 'none' }}\r\n            rows='3'\r\n            className='form-control'\r\n            value={formData.back}\r\n            placeholder='Back side of card'\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n        </div>\r\n        <div className='mb-3'>\r\n          <Link to={`/decks/${deckId}`}>\r\n            <button className='btn btn-secondary mr-2'>Done</button>\r\n          </Link>\r\n          <button type='submit' className='btn btn-primary'>\r\n            Save\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Link, useHistory, useParams } from 'react-router-dom'\r\nimport { updateCard, readDeck, readCard } from '../../utils/api/index'\r\n\r\nexport default function AddCard() {\r\n  const initialState = { front: '', back: '' }\r\n  const [formData, setFormData] = useState(initialState)\r\n  const [deck, setDeck] = useState({})\r\n  const [card, setCard] = useState({})\r\n  const history = useHistory()\r\n  const { deckId, cardId } = useParams()\r\n\r\n  const handleChange = event => {\r\n    setFormData({ ...formData, [event.target.name]: event.target.value })\r\n  }\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault()\r\n    await updateCard(formData)\r\n    history.push(`/decks/${deckId}`)\r\n  }\r\n  // initalize the deck and card using params\r\n  useEffect(() => {\r\n    const abortController = new AbortController()\r\n    const loadDeck = async () => {\r\n      const loadedDeck = await readDeck(deckId, abortController.signal)\r\n      const loadedCard = await readCard(cardId)\r\n      setDeck(() => loadedDeck)\r\n      setCard(() => loadedCard)\r\n      setFormData({\r\n        id: cardId,\r\n        front: loadedCard.front,\r\n        back: loadedCard.back,\r\n        deckId: Number(deckId),\r\n      })\r\n    }\r\n    loadDeck()\r\n    return () => abortController.abort()\r\n  }, [deckId, cardId])\r\n\r\n  return (\r\n    <>\r\n      <nav aria-label='breadcrumb'>\r\n        <ol className='breadcrumb'>\r\n          <li className='breadcrumb-item text-primary'>\r\n            <Link to='/'>\r\n              <i className='bi bi-house-door-fill'></i> Home\r\n            </Link>\r\n          </li>\r\n          <li className='breadcrumb-item text-primary'>\r\n            <Link to={`/decks/${deckId}`}>Deck {deck.name}</Link>\r\n          </li>\r\n          <li className='breadcrumb-item active' aria-current='page'>\r\n            Edit Card {card.id}\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <h1>Edit Card</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className='form-group'>\r\n          <label htmlFor='front'>\r\n            <h4>Front</h4>\r\n          </label>\r\n          <textarea\r\n            name='front'\r\n            style={{ resize: 'none' }}\r\n            rows='3'\r\n            className='form-control'\r\n            value={formData.front}\r\n            placeholder='Front side of card'\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n        </div>\r\n        <div className='form-group'>\r\n          <label htmlFor='back'>\r\n            <h4>Back</h4>\r\n          </label>\r\n          <textarea\r\n            name='back'\r\n            style={{ resize: 'none' }}\r\n            rows='3'\r\n            className='form-control'\r\n            value={formData.back}\r\n            placeholder='Back side of card'\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n        </div>\r\n        <div className='mb-3'>\r\n          <Link to={`/decks/${deckId}`}>\r\n            <button className='btn btn-secondary mr-2'>Cancel</button>\r\n          </Link>\r\n          <button type='submit' className='btn btn-primary'>\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\nimport Header from './Common/Header'\nimport NotFound from './Common/NotFound'\nimport Home from './Home/Home'\nimport CreateDeck from './Home/CreateDeck'\nimport Study from './Deck/Study'\nimport Deck from './Deck/Deck'\nimport { Switch, Route } from 'react-router-dom'\nimport EditDeck from './Deck/EditDeck'\nimport AddCard from './Cards/AddCard'\nimport EditCard from './Cards/EditCard'\n\nfunction Layout() {\n  const [numOfDecks, setNumOfDecks] = useState(0)\n  const updateDecks = val => {\n    //used to re-render decklist on home page properly\n    setNumOfDecks(() => numOfDecks + val)\n  }\n\n  return (\n    <>\n      <Header />\n      <div className='container'>\n        <Switch>\n          <Route path='/' exact={true}>\n            <Home numOfDecks={numOfDecks} updateDecks={updateDecks} />\n          </Route>\n          <Route path='/decks/:deckId/study'>\n            <Study />\n          </Route>\n          <Route path='/decks/new'>\n            <CreateDeck />\n          </Route>\n          <Route path='/decks/:deckId/edit'>\n            <EditDeck />\n          </Route>\n          <Route path='/decks/:deckId' exact={true}>\n            <Deck updateDecks={updateDecks} />\n          </Route>\n          <Route path='/decks/:deckId/cards/:cardId/edit'>\n            <EditCard />\n          </Route>\n          <Route path='/decks/:deckId/cards/new'>\n            <AddCard />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n        <div className='container'></div>\n      </div>\n    </>\n  )\n}\n\nexport default Layout\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}